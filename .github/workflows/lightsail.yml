# This workflow will build and push a new container image to Amazon ECR 
# and then will deploy a new image to AWS LightSail 
# while deleting all the previous images from the LightSail instance and ECR.

name: Deploy to Amazon LightSail

on:
  push:
    branches: [ "Testing", "main" ]

env:
  AWS_ACC_ID: ${{ secrets.AWS_ACC_ID }}
  AWS_REGION: ${{ secrets.AWS_REGION }}                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}          # set this to your Amazon ECR repository name
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}          # set this to the name of the container in the containerDefinitions section of your task definition
  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
  PORT: ${{ secrets.PORT }}
  NODE_ENV: ${{ secrets.NODE_ENV }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  SESSION_URI: ${{ secrets.SESSION_URI }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  LIGHTSAIL_SSH_KEY: ${{ secrets.LIGHTSAIL_SSH_KEY }}
  LIGHTSAIL_INSTANCE_IP: ${{ secrets.LIGHTSAIL_INSTANCE_IP }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    # Fetch code from the repo
    - name: Checkout
      uses: actions/checkout@v4
    
    # Install and setup AWS Cli
    - name: Upgrade AWS CLI version and setup lightsailctl
      run: |
        aws --version
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
        which aws
        aws --version
        sudo curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
        sudo chmod +x /usr/local/bin/lightsailctl
        # Cleanup
        rm -f awscliv2.zip
        rm -rf aws

    # configure aws credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # login to AWS ECR using aws actions
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Build and push the Docker image to my ECR
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR so that it can be deployed to Lightsail.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT
    
    # Delete the last docker image from ECR to avoid pile up
    - name: Delete Previous Image from ECR
      if: always()
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        AWS_ACCOUNT_ID: ${{ env.AWS_ACC_ID }}
      run: |
        # Fetch the list of images in the repository
        IMAGE_DIGEST=$(aws ecr describe-images \
          --repository-name $ECR_REPOSITORY \
          --registry-id $AWS_ACCOUNT_ID \
          --query 'sort_by(imageDetails,&imagePushedAt)[0].imageDigest' \
          --output text)
    
        # Delete the previous image by digest
        if [ "$IMAGE_DIGEST" != "None" ]; then
          echo "Deleting previous image with digest: $IMAGE_DIGEST"
          aws ecr batch-delete-image \
            --repository-name $ECR_REPOSITORY \
            --registry-id $AWS_ACCOUNT_ID \
            --image-ids imageDigest=$IMAGE_DIGEST
        else
          echo "No previous image found to delete."
        fi
    
    # Setup SSH key for lightsail
    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ env.LIGHTSAIL_SSH_KEY }}" | base64 -d > ~/.ssh/id_rsa.pem
        chmod 600 ~/.ssh/id_rsa.pem
        ssh-keyscan -t rsa "${{ env.LIGHTSAIL_INSTANCE_IP }}" >> ~/.ssh/known_hosts
  
    # Automate lightsail instance deployment
    - name: Connect to Lightsail instance, stop and remove container/images, pull latest image, and run new container
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa.pem ubuntu@"${{ env.LIGHTSAIL_INSTANCE_IP }}" << 'EOF'
        # Define container name
        CONTAINER_NAME=${{env.CONTAINER_NAME}}
    
        # Stop and remove the existing container
        if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
          echo "Stopping and removing existing container: $CONTAINER_NAME"
          docker stop $CONTAINER_NAME
          docker rm $CONTAINER_NAME
        fi
        
        # Remove the existing image if needed
        existing_image=$(docker images -q ${{ env.AWS_ACC_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{env.ECR_REPOSITORY}})
        if [ -n "$existing_image" ]; then
          echo "Removing existing image: $existing_image"
          docker rmi -f $existing_image
        fi

        # Login to docker ecr 
        echo "Logging into docker ecr"
        aws ecr get-login-password --region ${{env.AWS_REGION}} | docker login --username AWS --password-stdin ${{env.AWS_ACC_ID}}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

        # Pull the latest image
        echo "Pulling the latest image..."
        docker pull ${{ env.AWS_ACC_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{env.ECR_REPOSITORY}}:latest
    
        # Run the new container
        echo "Running the new container..."
        docker run -d -p 5000:5000 --name $CONTAINER_NAME ${{ env.AWS_ACC_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{env.ECR_REPOSITORY}}:latest

        # Load the env from my S3 bucket to my container
        ENV_FILE_PATH="/home/ubuntu/.env"
        aws s3 cp s3://cartle-backend/.env $ENV_FILE_PATH
        docker cp $ENV_FILE_PATH "$CONTAINER_NAME:/app/.env"

        # Restart container
        docker restart $CONTAINER_NAME
        EOF
